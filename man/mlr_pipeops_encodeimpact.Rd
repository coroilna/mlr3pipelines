% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpEncodeImpact.R
\name{mlr_pipeops_encodeimpact}
\alias{mlr_pipeops_encodeimpact}
\alias{PipeOpEncodeImpact}
\title{Conditional Target Value Impact Encoding}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}
\description{
Encodes columns of type \code{factor}, and \code{ordered}.

Impact coding for \link[mlr3:TaskClassif]{classification Tasks} converts factor levels of each
(factorial) column to the difference between each target level's conditional log-likelihood given
this level, and the target level's global log-likelihood.

Impact coding for \link[mlr3:TaskRegr]{regression Tasks} converts factor levels of each (factorial)
column to the difference between the target's conditional mean given this level, and the target's
global mean.

During training, the impact coding is done using a cross-method. This means that the training
\code{\link[mlr3:Task]{Task}} is split into several folds via \code{\link[mlr3:mlr_resamplings_cv]{ResamplingCV}} and for
each fold, impact coding is performed for each test set based on the respective training set.
This is helpful to prevent nested model bias.

Treats new levels during prediction like missing values.
}
\section{Construction}{
\preformatted{PipeOpEncodeImpact$new(id = "encodeimpact", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"encodeimpact"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would
otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with all affected \code{factor}, or \code{ordered} parameters encoded.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{train_task_hash} :: \code{character(1)}\cr
The hash (unique identifier) for the training \code{\link[mlr3:Task]{Task}}.
\item \code{rsmp_cv_instance} :: a \code{data.table}\cr
If \code{folds} is larger than one, the resampling instance of the \code{\link[mlr3:mlr_resamplings_cv]{ResamplingCV}} used during training.
\item \code{impact_predict} :: a named \code{list}\cr
A list with an element for each affected feature:\cr
For regression, each element is a single column matrix of impact values for each level of that feature.\cr
For classification, this is a list with an element for each \emph{feature level}, which is a vector
giving the impact of this feature level on each \emph{outcome level}.
This list is used to encode impact of the prediction \code{\link[mlr3:Task]{Task}}.
\item \code{impact_cv} :: a \code{list} of named \code{lists}\cr
A list of length \code{folds} with each element holding a list like \code{impact_predict} above.
These lists are used to encode impact of the training \code{\link[mlr3:Task]{Task}}.
}
}

\section{Parameters}{

\itemize{
\item \code{smoothing} :: \code{numeric(1)} \cr
A finite positive value used for smoothing. Mostly relevant for \link[mlr3:TaskClassif]{classification Tasks} if
a factor does not coincide with a target factor level (and would otherwise give an infinite logit value).
Initialized to \code{1e-4}.
\item \code{impute_zero} :: \code{logical(1)}\cr
If \code{TRUE}, impute missing values as impact 0; otherwise the respective impact is coded as \code{NA}. Default is \code{FALSE}.
\item \code{folds} :: \code{integer(1)}\cr
Number of folds used in the cross-method and passed to \code{\link[mlr3:mlr_resamplings_cv]{ResamplingCV}}. Default is \code{3}.
If set to \code{1}, no cross-method will be applied during training, i.e., the whole training
\code{\link[mlr3:Task]{Task}} is used to encode impact during training.
}
}

\section{Internals}{

Uses laplace smoothing, mostly to avoid infinite values for \link[mlr3:TaskClassif]{classification Task}.
}

\section{Methods}{

Only methods inherited \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
library("mlr3")
poe = po("encodeimpact")

task = TaskClassif$new("task",
  backend = data.table::data.table(
    x = factor(c("a", "a", "b", "b", "b")),
    y = factor(c("a", "a", "a", "b", "b"))),
  target = "y")

poe$train(list(task))[[1]]$data()

poe$state
}
\seealso{
Other PipeOps: 
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreprocSimple}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_colroles}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputeconstant}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputelearner}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputeoor}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_multiplicityexply}},
\code{\link{mlr_pipeops_multiplicityimply}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nmf}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_ovrsplit}},
\code{\link{mlr_pipeops_ovrunite}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_proxy}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_randomprojection}},
\code{\link{mlr_pipeops_randomresponse}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_renamecolumns}},
\code{\link{mlr_pipeops_replicate}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinvert}},
\code{\link{mlr_pipeops_targetmutate}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_vtreat}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
